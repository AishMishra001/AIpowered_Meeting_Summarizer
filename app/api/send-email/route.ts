import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { email, summary } = await request.json()

    if (!email || !summary) {
      return NextResponse.json({ error: "Email and summary are required" }, { status: 400 })
    }

    const apiKey = process.env.RESEND_API_KEY
    const VERIFIED_EMAIL = "aish.work008@gmail.com"

    if (!apiKey) {
      console.log(`[v0] No RESEND_API_KEY found, falling back to simulation`)
      console.log(`[v0] Simulating email send to: ${email}`)
      console.log(`[v0] Summary content: ${summary.substring(0, 100)}...`)

      return NextResponse.json({
        success: true,
        message: `Email simulated for ${email} (RESEND_API_KEY not configured)`,
      })
    }

    if (email !== VERIFIED_EMAIL) {
      console.log(`[v0] Email ${email} not allowed, only ${VERIFIED_EMAIL} is verified`)
      console.log(`[v0] Simulating email send to: ${email}`)
      console.log(`[v0] Summary content: ${summary.substring(0, 100)}...`)

      return NextResponse.json({
        success: true,
        message: `Email simulated for ${email}. Note: Resend free tier only allows sending to ${VERIFIED_EMAIL}. To send to other recipients, verify a domain at resend.com/domains.`,
        isSimulated: true,
      })
    }

    try {
      const response = await fetch("https://api.resend.com/emails", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          from: "Meeting Notes <onboarding@resend.dev>",
          to: [email],
          subject: "Meeting Summary",
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h1 style="color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px;">Meeting Summary</h1>
              <div style="line-height: 1.6; color: #555;">
                ${summary.replace(/\n/g, "<br>")}
              </div>
              <hr style="margin: 20px 0; border: none; border-top: 1px solid #eee;">
              <p style="color: #888; font-size: 12px;">
                This summary was generated by AI Meeting Notes Summarizer
              </p>
            </div>
          `,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.log(`[v0] Resend API Error - Status: ${response.status}`)
        console.log(`[v0] Resend API Error - Response: ${errorText}`)
        throw new Error(`Resend API error: ${response.status} - ${errorText}`)
      }

      const result = await response.json()
      console.log(`[v0] Email sent successfully to: ${email}`)

      return NextResponse.json({
        success: true,
        message: `Email sent to ${email}`,
        id: result.id,
      })
    } catch (emailError) {
      console.error("Email sending failed, falling back to simulation:", emailError)

      console.log(`[v0] Simulating email send to: ${email}`)
      console.log(`[v0] Summary content: ${summary.substring(0, 100)}...`)

      await new Promise((resolve) => setTimeout(resolve, 1000))

      return NextResponse.json({
        success: true,
        message: `Email simulated for ${email} (Resend API failed)`,
        isSimulated: true,
      })
    }
  } catch (error) {
    console.error("Error sending email:", error)
    return NextResponse.json({ error: "Failed to send email" }, { status: 500 })
  }
}
